#  amsynth CMakeLists.txt
#
#  Copyright (C) 2021 AnClark Liu
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

cmake_minimum_required (VERSION 3.7)

project (amsynth
  VERSION 0.1.0
  DESCRIPTION "Analogue Modeling SYNTHesizer"
  LANGUAGES C CXX
  HOMEPAGE_URL "https://github.com/amsynth/amsynth"
)

set (CMAKE_CXX_STANDARD 14)

#
# Path definitions
#

if (WIN32)
    set (DEFAULT_VST_PATH "$ENV{SYSTEMDRIVE}/Program Files/Steinberg/VSTPlugins")
    set (DEFAULT_LV2_PATH "$ENV{SYSTEMDRIVE}/Program Files/Common Files/LV2")
    set (DEFAULT_READONLY_DATADIR "${CONFIG_PREFIX}")
    set (DEFAULT_PKGDATADIR "${CONFIG_PREFIX}")
else ()
    set (DEFAULT_VST_PATH "/usr/lib/vst")
    set (DEFAULT_LV2_PATH "/usr/lib/lv2")
    set (DEFAULT_READONLY_DATADIR "${CONFIG_DATADIR}/amsynth/")
    set (DEFAULT_PKGDATADIR "${CONFIG_DATADIR}/amsynth/")
endif ()

set (CONFIG_READONLY_DATADIR "${DEFAULT_READONLY_DATADIR}" CACHE STRING "Directory for read-only architecture-independent data. HARDCODED in binaries.")
set (CONFIG_PKGDATADIR "${DEFAULT_PKGDATADIR}" CACHE STRING "Directory for storing package data (banks, etc.). HARDCODED in binaries.")

set (CONFIG_VST_PATH ${DEFAULT_VST_PATH} CACHE STRING "Specify VST plugin path")
set (CONFIG_LV2_PATH ${DEFAULT_LV2_PATH} CACHE STRING "Specity LV2 plugin path")

# Usually, these parameters are generated by autotools.
# In CMake, I need to feed them myself.
set (AMSYNTH_COMPILE_DEFINITIONS
    PRIVATE DATADIR="${CONFIG_READONLY_DATADIR}"
    PRIVATE PKGDATADIR="${CONFIG_PKGDATADIR}"
    PRIVATE PACKAGE="${PROJECT_NAME}"
    PRIVATE PACKAGE_NAME="${PROJECT_NAME}"
    PRIVATE PACKAGE_STRING="${PROJECT_NAME}"
    PRIVATE VERSION="${PROJECT_VERSION}"
    PRIVATE PACKAGE_URL="${PROJECT_HOMEPAGE_URL}"
    PRIVATE PACKAGE_BUGREPORT=""
)


#
# Import DPF support
#

set (DPF_PATH "${PROJECT_SOURCE_DIR}/vendor/dpf")
set (DPF_WIDGETS_PATH "${PROJECT_SOURCE_DIR}/vendor/dpf-widgets")
add_subdirectory (${DPF_PATH})


#
# Source files
#

set (LIBCORE_SRC
    src/Configuration.cpp
    src/Configuration.h
    src/controls.h
    src/filesystem.cpp
    src/filesystem.h
    src/midi.h
    src/MidiController.cpp
    src/MidiController.h
    src/Parameter.cpp
    src/Parameter.h
    src/Preset.cpp
    src/Preset.h
    src/PresetController.cpp
    src/PresetController.h
    src/types.h
    src/UpdateListener.h
)

set (LIBDSP_SRC
    src/Effects/Distortion.cpp
    src/Effects/Distortion.h
    src/Effects/SoftLimiter.cpp
    src/Effects/SoftLimiter.h
    src/Synthesizer.cpp
    src/Synthesizer.h
    src/TuningMap.cpp
    src/TuningMap.h
    src/VoiceAllocationUnit.cpp
    src/VoiceAllocationUnit.h
    src/VoiceBoard/ADSR.cpp
    src/VoiceBoard/ADSR.h
    src/VoiceBoard/LowPassFilter.cpp
    src/VoiceBoard/LowPassFilter.h
    src/VoiceBoard/Oscillator.cpp
    src/VoiceBoard/Oscillator.h
    src/VoiceBoard/Synth--.h
    src/VoiceBoard/VoiceBoard.cpp
    src/VoiceBoard/VoiceBoard.h
    vendor/freeverb/allpass.cpp
    vendor/freeverb/allpass.hpp
    vendor/freeverb/comb.cpp
    vendor/freeverb/comb.hpp
    vendor/freeverb/denormals.h
    vendor/freeverb/revmodel.cpp
    vendor/freeverb/revmodel.hpp
    vendor/freeverb/tuning.h
)

add_library (${PROJECT_NAME}_core STATIC
    ${LIBCORE_SRC}
    ${LIBDSP_SRC}
)

target_compile_definitions (${PROJECT_NAME}_core ${AMSYNTH_COMPILE_DEFINITIONS})

target_include_directories (${PROJECT_NAME}_core PUBLIC src)
target_include_directories (${PROJECT_NAME}_core PUBLIC vendor)


#
# Dear ImGui addons
#

set (IMGUI_ADDON_SRC
    vendor/imgui_addons/zynlab/imgui_common.cpp
    vendor/imgui_addons/zynlab/imgui_knob.cpp
    vendor/imgui_addons/anclark/imgui_extra_button.cpp
    vendor/imgui_addons/anclark/imgui_oscilloscope.cpp
    vendor/imgui_addons/imgui-knobs/imgui-knobs.cpp
)
set (IMGUI_ADDON_INCLUDE_DIR
    vendor/imgui_addons/zynlab
    vendor/imgui_addons/anclark
    vendor/imgui_addons/imgui-knobs
)

add_library (${PROJECT_NAME}_imgui_addons STATIC ${IMGUI_ADDON_SRC})

target_include_directories(${PROJECT_NAME}_imgui_addons PUBLIC ${DPF_WIDGETS_PATH}/opengl/DearImGui)
target_include_directories(${PROJECT_NAME}_imgui_addons PUBLIC ${IMGUI_ADDON_INCLUDE_DIR})


#
# DPF target
#

dpf_add_plugin (${PROJECT_NAME}
  TARGETS clap lv2 vst2 vst3 jack
  FILES_DSP
      src/amsynth_dpf.cpp
  #FILES_UI
  #    src/amsynth_dpf_ui.cpp
  #    ${DPF_WIDGETS_PATH}/opengl/DearImGui.cpp
)

target_include_directories (${PROJECT_NAME} PUBLIC src)
target_include_directories (${PROJECT_NAME} PUBLIC ${DPF_WIDGETS_PATH}/generic)
target_include_directories (${PROJECT_NAME} PUBLIC ${DPF_WIDGETS_PATH}/opengl)

target_link_libraries (${PROJECT_NAME} PRIVATE ${PROJECT_NAME}_core)
target_link_libraries (${PROJECT_NAME} PRIVATE ${PROJECT_NAME}_imgui_addons)

# Workaround for SDL2 linker error on Windows (with Msys2)
if (WIN32)
    target_link_libraries(${PROJECT_NAME} PRIVATE "cfgmgr32" "imm32" "setupapi" "version")   # To deal with SDL2 linker error on Msys2
endif ()


#
# Factory bank conversion - convert factory banks to C++ code so that they can be accessed internally
#

add_subdirectory(utils/factory_bank_to_c)

set (GENERATED_FACTORY_BANK_DIR "${CMAKE_BINARY_DIR}/factory_bank")
file (MAKE_DIRECTORY ${GENERATED_FACTORY_BANK_DIR})

set (SOURCES_FACTORY_BANK
    ${GENERATED_FACTORY_BANK_DIR}/amsynth_factory_banks.cpp
    ${GENERATED_FACTORY_BANK_DIR}/amsynth_factory_banks.h
)
set (SOURCES_FACTORY_BANK_HANDLER
    src/EmbedPresetController.cpp
    src/EmbedPresetController.h
)

add_custom_command (
    OUTPUT ${SOURCES_FACTORY_BANK}
    COMMAND ./utils/factory_bank_to_c/factory_bank_to_c${CMAKE_EXECUTABLE_SUFFIX} ${PROJECT_SOURCE_DIR}/data/banks ${GENERATED_FACTORY_BANK_DIR}
    DEPENDS factory_bank_to_c
    VERBATIM
)

# Factory bank content and handler module
add_library (${PROJECT_NAME}_factory_bank STATIC
    ${SOURCES_FACTORY_BANK}
    ${SOURCES_FACTORY_BANK_HANDLER}
)
target_include_directories (${PROJECT_NAME}_factory_bank PRIVATE src)

target_link_libraries (${PROJECT_NAME} PRIVATE ${PROJECT_NAME}_factory_bank)
